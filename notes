Steps for myself
1. decide on models and their relationships
    -make model and migration files
    -add the relationship code (mas_many, etc)

2. make routes and controllers
    -have a home page

3. implement signing up and logging in
    -have signup and login pages, plus logout
    -add validations for users, and display errors
    -add secure password 
    -add third party login, probably omniauth

4. implement creating decks with cards
    -is able to make a deck without any cards
    -is able to make a card in console
    -is able to make cards when making a deck through a nested form
    -able to Create, Read, Update, and destroy decks along with cards at the same time
    -add validations for deck and card model, and display errors

5. implement how a user would interact with decks
    -have an "index" page where a user can select certain decks or choose the order
    -let users share decks and let users save decks created by others
    -editing saved decks from others would create a new deck so that one user doesn't 

6. implement admin features
    -different login route to regular users
    -can create decks that aren't public

7. implement tournaments
    -can create tournaments
    -admins can add decks to tournaments and order them in a specific order, add deck form with drop down
    -post tournaments

8. Refactor, make it DRY


Models as of now

User
    name:string
    email:string
    password_digest:string
    admin:boolean, default false

has_many :user_deck
has_many :decks, through: :user_deck
---------------------------------------
User_deck
    user_id:integer
    deck_id:integer

belongs_to :user
belongs_to :deck
---------------------------------------
Deck (website revolves around decks since the site lets users share decks and report tournaments) 
        (nested model to create cards)
	title:string
    description:string
    shared:boolean
        (user can share their deck or keep private to them, also used for tournament decks)
	player_name:string 
    tournament_id:integer
    tournament_placement:integer 
        (for admin use only to organize decks when making tournaments)

has_many :user_deck
has_many :users, through: :user_deck
belongs_to :tournament
has_many :cards

What player_name will be used for? When a user makes a new deck, this value will be hidden and will
auto fill in with the user.name. When a user saves a deck not made by them they won't be able to 
change the name of the user who made the deck and claim they first made it. For admins, this value
will be visible and admins will set the player_name to the irl player because only admins can add 
decks to tournaments. 
----------------------------------------
Tournament (list of decks and event info)
	event_name:string
	event_date:string
    finished:boolean 
        (only tournaments that are finished being created by the admin will be public for users)
	info:string

has_many :decks
-----------------------------------------
Card (what makes the deck) (created by deck)
	name:string (could have set)
	count:integer (decks can only have 60 cards)
	basic_energy:boolean (you can only play up to 4 of the same card unless it's basic energy)

belongs_to :deck